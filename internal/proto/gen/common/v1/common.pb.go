// Taken from https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/common/v1/common.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: common/v1/common.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents any type of attribute value. AnyValue may contain a
// primitive value such as a string or integer or it may contain an arbitrary nested
// object containing arrays, key-value lists and primitives.
type AnyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value is one of the listed fields. It is valid for all values to be unspecified
	// in which case this AnyValue is considered to be "empty".
	//
	// Types that are valid to be assigned to Value:
	//
	//	*AnyValue_StringValue
	//	*AnyValue_BoolValue
	//	*AnyValue_IntValue
	//	*AnyValue_DoubleValue
	//	*AnyValue_ArrayValue
	//	*AnyValue_KvlistValue
	//	*AnyValue_BytesValue
	Value         isAnyValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnyValue) Reset() {
	*x = AnyValue{}
	mi := &file_common_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyValue) ProtoMessage() {}

func (x *AnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyValue.ProtoReflect.Descriptor instead.
func (*AnyValue) Descriptor() ([]byte, []int) {
	return file_common_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *AnyValue) GetValue() isAnyValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AnyValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *AnyValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *AnyValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *AnyValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *AnyValue) GetArrayValue() *ArrayValue {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_ArrayValue); ok {
			return x.ArrayValue
		}
	}
	return nil
}

func (x *AnyValue) GetKvlistValue() *KeyValueList {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_KvlistValue); ok {
			return x.KvlistValue
		}
	}
	return nil
}

func (x *AnyValue) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

type isAnyValue_Value interface {
	isAnyValue_Value()
}

type AnyValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type AnyValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type AnyValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type AnyValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type AnyValue_ArrayValue struct {
	ArrayValue *ArrayValue `protobuf:"bytes,5,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

type AnyValue_KvlistValue struct {
	KvlistValue *KeyValueList `protobuf:"bytes,6,opt,name=kvlist_value,json=kvlistValue,proto3,oneof"`
}

type AnyValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,7,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

func (*AnyValue_StringValue) isAnyValue_Value() {}

func (*AnyValue_BoolValue) isAnyValue_Value() {}

func (*AnyValue_IntValue) isAnyValue_Value() {}

func (*AnyValue_DoubleValue) isAnyValue_Value() {}

func (*AnyValue_ArrayValue) isAnyValue_Value() {}

func (*AnyValue_KvlistValue) isAnyValue_Value() {}

func (*AnyValue_BytesValue) isAnyValue_Value() {}

// ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
// since oneof in AnyValue does not allow repeated fields.
type ArrayValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Array of values. The array may be empty (contain 0 elements).
	Values        []*AnyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArrayValue) Reset() {
	*x = ArrayValue{}
	mi := &file_common_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayValue) ProtoMessage() {}

func (x *ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayValue.ProtoReflect.Descriptor instead.
func (*ArrayValue) Descriptor() ([]byte, []int) {
	return file_common_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *ArrayValue) GetValues() []*AnyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
// since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
// a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
// avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
// are semantically equivalent.
type KeyValueList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A collection of key/value pairs of key-value pairs. The list may be empty (may
	// contain 0 elements).
	// The keys MUST be unique (it is not allowed to have more than one
	// value with the same key).
	Values        []*KeyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValueList) Reset() {
	*x = KeyValueList{}
	mi := &file_common_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueList) ProtoMessage() {}

func (x *KeyValueList) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueList.ProtoReflect.Descriptor instead.
func (*KeyValueList) Descriptor() ([]byte, []int) {
	return file_common_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *KeyValueList) GetValues() []*KeyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// Represents a key-value pair that is used to store Span attributes, Link
// attributes, etc.
type KeyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key name of the pair.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the pair.
	Value         *AnyValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_common_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_common_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() *AnyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// ArchetypeScope is a message representing the archetype scope information
// such as the fully qualified name and version.
type ArchetypeScope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A name denoting the Archetype scope.
	// An empty archetype scope name means the name is unknown.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Defines the version of the archetype scope.
	// An empty archetype scope version means the version is unknown.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Additional attributes that describe the scope. [Optional].
	// Attribute keys MUST be unique (it is not allowed to have more than one
	// attribute with the same key).
	Attributes []*KeyValue `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// The number of attributes that were discarded. Attributes
	// can be discarded because their keys are too long or because there are too many
	// attributes. If this value is 0, then no attributes were dropped.
	DroppedAttributesCount uint32 `protobuf:"varint,4,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArchetypeScope) Reset() {
	*x = ArchetypeScope{}
	mi := &file_common_v1_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchetypeScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchetypeScope) ProtoMessage() {}

func (x *ArchetypeScope) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchetypeScope.ProtoReflect.Descriptor instead.
func (*ArchetypeScope) Descriptor() ([]byte, []int) {
	return file_common_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *ArchetypeScope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArchetypeScope) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ArchetypeScope) GetAttributes() []*KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ArchetypeScope) GetDroppedAttributesCount() uint32 {
	if x != nil {
		return x.DroppedAttributesCount
	}
	return 0
}

// A reference to an Entity.
// Entity represents an object of interest associated with produced telemetry: e.g spans, metrics, profiles, or logs.
//
// Status: [Development]
type EntityRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Schema URL, if known. This is the identifier of the Schema that the entity data
	// is recorded in. To learn more about Schema URL see
	// https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
	//
	// This schema_url applies to the data in this message and to the Resource attributes
	// referenced by id_keys and description_keys.
	// TODO: discuss if we are happy with this somewhat complicated definition of what
	// the schema_url applies to.
	//
	// This field obsoletes the schema_url field in ResourceMetrics/ResourceSpans/ResourceLogs.
	SchemaUrl string `protobuf:"bytes,1,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
	// Defines the type of the entity. MUST not change during the lifetime of the entity.
	// For example: "service" or "host". This field is required and MUST not be empty
	// for valid entities.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Attribute Keys that identify the entity.
	// MUST not change during the lifetime of the entity. The Id must contain at least one attribute.
	// These keys MUST exist in the containing {message}.attributes.
	IdKeys []string `protobuf:"bytes,3,rep,name=id_keys,json=idKeys,proto3" json:"id_keys,omitempty"`
	// Descriptive (non-identifying) attribute keys of the entity.
	// MAY change over the lifetime of the entity. MAY be empty.
	// These attribute keys are not part of entity's identity.
	// These keys MUST exist in the containing {message}.attributes.
	DescriptionKeys []string `protobuf:"bytes,4,rep,name=description_keys,json=descriptionKeys,proto3" json:"description_keys,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EntityRef) Reset() {
	*x = EntityRef{}
	mi := &file_common_v1_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRef) ProtoMessage() {}

func (x *EntityRef) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRef.ProtoReflect.Descriptor instead.
func (*EntityRef) Descriptor() ([]byte, []int) {
	return file_common_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *EntityRef) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

func (x *EntityRef) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EntityRef) GetIdKeys() []string {
	if x != nil {
		return x.IdKeys
	}
	return nil
}

func (x *EntityRef) GetDescriptionKeys() []string {
	if x != nil {
		return x.DescriptionKeys
	}
	return nil
}

var File_common_v1_common_proto protoreflect.FileDescriptor

const file_common_v1_common_proto_rawDesc = "" +
	"\n" +
	"\x16common/v1/common.proto\x12\tcommon.v1\"\xb8\x02\n" +
	"\bAnyValue\x12#\n" +
	"\fstring_value\x18\x01 \x01(\tH\x00R\vstringValue\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x02 \x01(\bH\x00R\tboolValue\x12\x1d\n" +
	"\tint_value\x18\x03 \x01(\x03H\x00R\bintValue\x12#\n" +
	"\fdouble_value\x18\x04 \x01(\x01H\x00R\vdoubleValue\x128\n" +
	"\varray_value\x18\x05 \x01(\v2\x15.common.v1.ArrayValueH\x00R\n" +
	"arrayValue\x12<\n" +
	"\fkvlist_value\x18\x06 \x01(\v2\x17.common.v1.KeyValueListH\x00R\vkvlistValue\x12!\n" +
	"\vbytes_value\x18\a \x01(\fH\x00R\n" +
	"bytesValueB\a\n" +
	"\x05value\"9\n" +
	"\n" +
	"ArrayValue\x12+\n" +
	"\x06values\x18\x01 \x03(\v2\x13.common.v1.AnyValueR\x06values\";\n" +
	"\fKeyValueList\x12+\n" +
	"\x06values\x18\x01 \x03(\v2\x13.common.v1.KeyValueR\x06values\"G\n" +
	"\bKeyValue\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.common.v1.AnyValueR\x05value\"\xad\x01\n" +
	"\x0eArchetypeScope\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x123\n" +
	"\n" +
	"attributes\x18\x03 \x03(\v2\x13.common.v1.KeyValueR\n" +
	"attributes\x128\n" +
	"\x18dropped_attributes_count\x18\x04 \x01(\rR\x16droppedAttributesCount\"\x82\x01\n" +
	"\tEntityRef\x12\x1d\n" +
	"\n" +
	"schema_url\x18\x01 \x01(\tR\tschemaUrl\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x17\n" +
	"\aid_keys\x18\x03 \x03(\tR\x06idKeys\x12)\n" +
	"\x10description_keys\x18\x04 \x03(\tR\x0fdescriptionKeysB\x9d\x01\n" +
	"\rcom.common.v1B\vCommonProtoP\x01Z:github.com/freekieb7/gopenehr/internal/proto/gen/common/v1\xa2\x02\x03CXX\xaa\x02\tCommon.V1\xca\x02\tCommon\\V1\xe2\x02\x15Common\\V1\\GPBMetadata\xea\x02\n" +
	"Common::V1b\x06proto3"

var (
	file_common_v1_common_proto_rawDescOnce sync.Once
	file_common_v1_common_proto_rawDescData []byte
)

func file_common_v1_common_proto_rawDescGZIP() []byte {
	file_common_v1_common_proto_rawDescOnce.Do(func() {
		file_common_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_v1_common_proto_rawDesc), len(file_common_v1_common_proto_rawDesc)))
	})
	return file_common_v1_common_proto_rawDescData
}

var file_common_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_common_v1_common_proto_goTypes = []any{
	(*AnyValue)(nil),       // 0: common.v1.AnyValue
	(*ArrayValue)(nil),     // 1: common.v1.ArrayValue
	(*KeyValueList)(nil),   // 2: common.v1.KeyValueList
	(*KeyValue)(nil),       // 3: common.v1.KeyValue
	(*ArchetypeScope)(nil), // 4: common.v1.ArchetypeScope
	(*EntityRef)(nil),      // 5: common.v1.EntityRef
}
var file_common_v1_common_proto_depIdxs = []int32{
	1, // 0: common.v1.AnyValue.array_value:type_name -> common.v1.ArrayValue
	2, // 1: common.v1.AnyValue.kvlist_value:type_name -> common.v1.KeyValueList
	0, // 2: common.v1.ArrayValue.values:type_name -> common.v1.AnyValue
	3, // 3: common.v1.KeyValueList.values:type_name -> common.v1.KeyValue
	0, // 4: common.v1.KeyValue.value:type_name -> common.v1.AnyValue
	3, // 5: common.v1.ArchetypeScope.attributes:type_name -> common.v1.KeyValue
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_common_v1_common_proto_init() }
func file_common_v1_common_proto_init() {
	if File_common_v1_common_proto != nil {
		return
	}
	file_common_v1_common_proto_msgTypes[0].OneofWrappers = []any{
		(*AnyValue_StringValue)(nil),
		(*AnyValue_BoolValue)(nil),
		(*AnyValue_IntValue)(nil),
		(*AnyValue_DoubleValue)(nil),
		(*AnyValue_ArrayValue)(nil),
		(*AnyValue_KvlistValue)(nil),
		(*AnyValue_BytesValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_v1_common_proto_rawDesc), len(file_common_v1_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_v1_common_proto_goTypes,
		DependencyIndexes: file_common_v1_common_proto_depIdxs,
		MessageInfos:      file_common_v1_common_proto_msgTypes,
	}.Build()
	File_common_v1_common_proto = out.File
	file_common_v1_common_proto_goTypes = nil
	file_common_v1_common_proto_depIdxs = nil
}
